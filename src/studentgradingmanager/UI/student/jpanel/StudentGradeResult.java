/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package studentgradingmanager.UI.student.jpanel;

import Class.Mark;
import Database.DBConnect;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Quan
 */
public class StudentGradeResult extends javax.swing.JPanel {

    /**
     * Creates new form StudentGradeResutl
     */
    private DefaultTableModel tbModelTT;
    ArrayList<String> hocKyArrayList;
    ArrayList<String> namHocArrayList;
    String id;
    ArrayList<Mark> markArrayListSemester1 = new ArrayList<Mark>();
    ArrayList<Mark> markArrayListSemester2 = new ArrayList<Mark>();
    ArrayList<String> tenMH = new ArrayList<String>();
    Double diemTBHK1;
    Double diemTBHK2;
    public StudentGradeResult(ArrayList<String> hocKyArray, ArrayList<String> namHocArray, String id) {
        initComponents();
        this.hocKyArrayList = hocKyArray;
        this.namHocArrayList = namHocArray;
        this.id = id;
        addDataForCb();
        jlbSemesterResult.setText("Chưa có dữ liệu");
        jlbYearResult.setText("Chưa có dữ liệu");
        jtStudentResult.setEnabled(false);
        TaoTable();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpStudentGradeResult = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jcbYear = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jcbSemester1 = new javax.swing.JComboBox<>();
        jbSearch = new javax.swing.JButton();
        jspStudentResultTable = new javax.swing.JScrollPane();
        jtStudentResult = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jlbYearResult = new javax.swing.JLabel();
        jlbSemesterResult = new javax.swing.JLabel();

        jpStudentGradeResult.setBackground(new java.awt.Color(255, 255, 255));
        jpStudentGradeResult.setForeground(new java.awt.Color(255, 255, 255));
        jpStudentGradeResult.setPreferredSize(new java.awt.Dimension(782, 549));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Năm học");

        jcbYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Điểm TB năm học");

        jcbSemester1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbSearch.setText("Tìm kiếm");
        jbSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSearchActionPerformed(evt);
            }
        });

        jtStudentResult.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));
        jtStudentResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Tên môn học", "Điểm QT", "Điểm GK", "Điểm CK", "Điểm TBHK", "Ghi chú"
            }
        ));
        jtStudentResult.setGridColor(new java.awt.Color(0, 0, 0));
        jtStudentResult.setShowGrid(true);
        jspStudentResultTable.setViewportView(jtStudentResult);
        if (jtStudentResult.getColumnModel().getColumnCount() > 0) {
            jtStudentResult.getColumnModel().getColumn(0).setPreferredWidth(10);
            jtStudentResult.getColumnModel().getColumn(1).setPreferredWidth(95);
            jtStudentResult.getColumnModel().getColumn(2).setPreferredWidth(50);
            jtStudentResult.getColumnModel().getColumn(3).setPreferredWidth(50);
            jtStudentResult.getColumnModel().getColumn(4).setPreferredWidth(50);
            jtStudentResult.getColumnModel().getColumn(5).setPreferredWidth(50);
        }

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Học kỳ");

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Điểm TB học kỳ");

        jlbYearResult.setBackground(new java.awt.Color(255, 255, 255));
        jlbYearResult.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbYearResult.setForeground(new java.awt.Color(255, 0, 51));
        jlbYearResult.setText("1.0");

        jlbSemesterResult.setBackground(new java.awt.Color(255, 255, 255));
        jlbSemesterResult.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jlbSemesterResult.setForeground(new java.awt.Color(255, 0, 51));
        jlbSemesterResult.setText("10.0");

        javax.swing.GroupLayout jpStudentGradeResultLayout = new javax.swing.GroupLayout(jpStudentGradeResult);
        jpStudentGradeResult.setLayout(jpStudentGradeResultLayout);
        jpStudentGradeResultLayout.setHorizontalGroup(
            jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpStudentGradeResultLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpStudentGradeResultLayout.createSequentialGroup()
                        .addComponent(jspStudentResultTable, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(34, Short.MAX_VALUE))
                    .addGroup(jpStudentGradeResultLayout.createSequentialGroup()
                        .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbSemester1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(69, 69, 69)
                        .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpStudentGradeResultLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jpStudentGradeResultLayout.createSequentialGroup()
                                .addComponent(jcbYear, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91))))
                    .addGroup(jpStudentGradeResultLayout.createSequentialGroup()
                        .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(50, 50, 50)
                        .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlbSemesterResult, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlbYearResult, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jpStudentGradeResultLayout.setVerticalGroup(
            jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpStudentGradeResultLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpStudentGradeResultLayout.createSequentialGroup()
                        .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbSemester1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(38, 38, 38)
                .addComponent(jspStudentResultTable, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jlbSemesterResult, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpStudentGradeResultLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jlbYearResult, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpStudentGradeResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpStudentGradeResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSearchActionPerformed
        try {
            finDataSubjectFromIdSemesterAndYear();
        } catch (SQLException ex) {
            Logger.getLogger(StudentGradeResult.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton jbSearch;
    private javax.swing.JComboBox<String> jcbSemester1;
    private javax.swing.JComboBox<String> jcbYear;
    private javax.swing.JLabel jlbSemesterResult;
    private javax.swing.JLabel jlbYearResult;
    private javax.swing.JPanel jpStudentGradeResult;
    private javax.swing.JScrollPane jspStudentResultTable;
    private javax.swing.JTable jtStudentResult;
    // End of variables declaration//GEN-END:variables

    private void addDataForCb(){
        jcbSemester1.removeAllItems();
        jcbYear.removeAllItems();
        for (String hocky : hocKyArrayList) {
            jcbSemester1.addItem(hocky);
        }
        for(String namHoc : namHocArrayList) {
            jcbYear.addItem(namHoc);
        }
        jcbSemester1.setSelectedIndex(0);
        jcbYear.setSelectedIndex(0);
    }

    private void finDataSubjectFromIdSemesterAndYear() throws SQLException{
            
        markArrayListSemester1.clear();
        tbModelTT.setRowCount(0);
        
        String semesterSelected = jcbSemester1.getSelectedItem().toString();
        int yearSelected = Integer.parseInt(jcbYear.getSelectedItem().toString());
        java.sql.Connection connection = DBConnect.getConnection();
        
        String sql = "SELECT * FROM DIEM, HOCKYNAMHOC, MONHOC WHERE MAHS = ? and DIEM.MAHK = ? and NAMHOC = ? and DIEM.MAMH = MONHOC.MAMH and "
                + "DIEM.MAHK = HOCKYNAMHOC.MAHK";
        PreparedStatement statement = connection.prepareStatement(sql);
        statement.setString(1, id);
        statement.setString(2, semesterSelected);
        statement.setInt(3, yearSelected);
        ResultSet resultSet = statement.executeQuery();
        while(resultSet.next()) {
            String tenMH = resultSet.getString("TENMH");
            double diemQT = resultSet.getDouble("DIEMQT");
            double diemGK = resultSet.getDouble("DIEMGK");
            double diemCK = resultSet.getDouble("DIEMCK");
            double diemTBHK = Math.round((diemQT * 0.2 + diemGK * 0.3 + diemCK * 0.5)*10) / 10.0;
            String ghiChu = resultSet.getString("GHICHU");
            Mark mark = new Mark(tenMH, diemQT, diemGK, diemCK,  diemTBHK, ghiChu);
            markArrayListSemester1.add(mark);
        }
        fillDataIntoTable();
    }

    private void fillDataIntoTable() {
        ArrayList<Double> diemTBHKArray = new ArrayList<Double>();
        // Lấy thông tin điểm của tất cả các môn để add vào table
        for (int i = 0; i < markArrayListSemester1.size(); i++) {
            String[] row = new String[7];
            row[0] = String.valueOf(i + 1);
            row[1] = markArrayListSemester1.get(i).getTenMH();
            row[2] = String.valueOf(markArrayListSemester1.get(i).getDiemQT());
            row[3] = String.valueOf(markArrayListSemester1.get(i).getDiemGK());
            row[4] = String.valueOf(markArrayListSemester1.get(i).getDiemCK());
            row[5] = String.valueOf(markArrayListSemester1.get(i).getDiemTBHK());
            diemTBHKArray.add(markArrayListSemester1.get(i).getDiemTBHK());
            row[6] = markArrayListSemester1.get(i).getGhiChu();
            tbModelTT.addRow(row);
         }
        // Tính điểm trung bình học kỳ;
        double tongDiem = 0;
        for (double diem : diemTBHKArray) {
            tongDiem += diem;
        }
        double diemTBHK = Math.round(tongDiem / diemTBHKArray.size() *100) / 100.0;
        if (jcbSemester1.getSelectedItem().equals("HK01")) {
            diemTBHK1 = diemTBHK;
        } else {
            diemTBHK2 = diemTBHK;
        }
        
        if (diemTBHK1 != null && diemTBHK2 != null) {
            double diemTBCN = Math.round((diemTBHK1 + diemTBHK2 * 2) / 3 * 100) / 100.0;
            jlbYearResult.setText(String.valueOf(diemTBCN));
        }
        jlbSemesterResult.setText(String.valueOf(diemTBHK));
        
       
    }
    public void TaoTable(){
        tbModelTT = new DefaultTableModel();
        String tieuDe[] = {"STT", "Tên môn học", "Điểm QT", "Điểm GK", "Điểm CK", "Điểm TBHK", "Ghi chú"};
        tbModelTT.setColumnIdentifiers(tieuDe);
        jtStudentResult.setModel(tbModelTT);
        setVisible(true);
    }

    
}
